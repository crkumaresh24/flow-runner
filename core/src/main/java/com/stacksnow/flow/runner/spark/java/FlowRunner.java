/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.stacksnow.flow.runner.spark.java;

import com.stacksnow.flow.runner.spark.java.cli.ITask;
import com.stacksnow.flow.runner.spark.java.model.Process;
import com.stacksnow.flow.runner.spark.java.model.*;
import org.jgrapht.experimental.dag.DirectedAcyclicGraph;
import org.jgrapht.traverse.TopologicalOrderIterator;
import org.springframework.http.HttpMethod;
import org.springframework.web.client.RestTemplate;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

public class FlowRunner {

    private RestTemplate restTemplate = new RestTemplate();
    private String processesServiceUrl;
    private String tasksServiceUrl;
    private String bucketName;

    public DirectedAcyclicGraph startDAG(DAG dag) throws Exception {
        DirectedAcyclicGraph<Node, Edge> graph = new DirectedAcyclicGraph(Edge.class);
        dag.getNodes().forEach(node -> {
            if (null != node.getAttributes()) {
                graph.addVertex(node);
                node.getAttributes().setStatusId(2);
            }
        });
        dag.getEdges().forEach(edge -> {
            Node source = dag.getNodes().stream().filter(node -> node.getKey().equalsIgnoreCase(edge.getSource())).findFirst().orElseThrow(RuntimeException::new);
            Node target = dag.getNodes().stream().filter(node -> node.getKey().equalsIgnoreCase(edge.getTarget())).findFirst().orElseThrow(RuntimeException::new);
            graph.addEdge(source, target, new Edge(edge.getKey(), source.getKey(), target.getKey()));
        });
        TopologicalOrderIterator<Node, Edge> iterator = new TopologicalOrderIterator<>(graph);
        SparkFlowContext flowContext = new SparkFlowContext(bucketName);
        Map<String, Task> runnerEntries = new HashMap<>();
        Task[] tasks = getTasksList();
        Arrays.asList(tasks).forEach(task -> {
            runnerEntries.put(task.getTaskName(), task);
        });
        while (iterator.hasNext()) {
            Node node = iterator.next();
            String type = node.getAttributes().getType();
            if (null == runnerEntries.get(type)) {
                throw new Exception("runner not found for " + node.getAttributes().getType());
            }
            Class<? extends ITask> taskClass = (Class<? extends ITask>) Class.forName(runnerEntries.get(type).getClassName());
            Set<Edge> incomingEdges = graph.incomingEdgesOf(node);
            String[] ins = incomingEdges.stream().map(Edge::getSource).toArray(String[]::new);
            flowContext.putResponse(node.getKey(), taskClass.newInstance().execute(flowContext, ins, node.getAttributes().getRequest()));
        }
        return graph;
    }

    private void start(String processId) throws Exception {
        Process process = getProcess(processId);
        try {
            DAG dag = process.getFlow().getDag();
            updateFlowStatus(process.getId(), "RUNNING");
            startDAG(dag);
            updateFlowStatus(process.getId(), "SUCCESS");
        } catch (Exception e) {
            updateFlowStatus(process.getId(), "FAILED");
            throw e;
        } finally {
            // Graceful exit to make kubernetes pod terminated successfully
            System.exit(0);
        }
    }

    private Task[] getTasksList() throws URISyntaxException {
        return restTemplate.getForEntity(new URI(tasksServiceUrl), Task[].class).getBody();
    }

    private Process getProcess(String processId) throws URISyntaxException {
        return restTemplate.getForEntity(new URI(processesServiceUrl + "/" + processId), Process.class).getBody();
    }

    private boolean updateFlowStatus(String flowId, String status) throws URISyntaxException {
        return restTemplate.exchange(new URI(processesServiceUrl + "/status/" + flowId + "/" + status), HttpMethod.PUT, null, String.class).getStatusCode().is2xxSuccessful();
    }

    public static void main(String[] args) throws Exception {
        FlowRunner flowRunner = new FlowRunner();
        flowRunner.tasksServiceUrl = args[0];
        flowRunner.processesServiceUrl = args[1];
        flowRunner.bucketName = args[2];
        flowRunner.start(args[3]);
    }
}
